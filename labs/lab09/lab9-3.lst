     1                                  %include 'in_out.asm'
     2                              <1> ;---------------   slen  -------------------
     3                              <1> ; Функция вычисления длины сообщения
     4                              <1> slen:                     
     5 00000000 53                  <1>     push    ebx             
     6 00000001 89C3                <1>     mov     ebx, eax        
     7                              <1>     
     8                              <1> nextchar:                   
     9 00000003 803800              <1>     cmp     byte [eax], 0   
    10 00000006 7403                <1>     jz      finished        
    11 00000008 40                  <1>     inc     eax             
    12 00000009 EBF8                <1>     jmp     nextchar        
    13                              <1>     
    14                              <1> finished:
    15 0000000B 29D8                <1>     sub     eax, ebx
    16 0000000D 5B                  <1>     pop     ebx             
    17 0000000E C3                  <1>     ret                     
    18                              <1> 
    19                              <1> 
    20                              <1> ;---------------  sprint  -------------------
    21                              <1> ; Функция печати сообщения
    22                              <1> ; входные данные: mov eax,<message>
    23                              <1> sprint:
    24 0000000F 52                  <1>     push    edx
    25 00000010 51                  <1>     push    ecx
    26 00000011 53                  <1>     push    ebx
    27 00000012 50                  <1>     push    eax
    28 00000013 E8E8FFFFFF          <1>     call    slen
    29                              <1>     
    30 00000018 89C2                <1>     mov     edx, eax
    31 0000001A 58                  <1>     pop     eax
    32                              <1>     
    33 0000001B 89C1                <1>     mov     ecx, eax
    34 0000001D BB01000000          <1>     mov     ebx, 1
    35 00000022 B804000000          <1>     mov     eax, 4
    36 00000027 CD80                <1>     int     80h
    37                              <1> 
    38 00000029 5B                  <1>     pop     ebx
    39 0000002A 59                  <1>     pop     ecx
    40 0000002B 5A                  <1>     pop     edx
    41 0000002C C3                  <1>     ret
    42                              <1> 
    43                              <1> 
    44                              <1> ;----------------  sprintLF  ----------------
    45                              <1> ; Функция печати сообщения с переводом строки
    46                              <1> ; входные данные: mov eax,<message>
    47                              <1> sprintLF:
    48 0000002D E8DDFFFFFF          <1>     call    sprint
    49                              <1> 
    50 00000032 50                  <1>     push    eax
    51 00000033 B80A000000          <1>     mov     eax, 0AH
    52 00000038 50                  <1>     push    eax
    53 00000039 89E0                <1>     mov     eax, esp
    54 0000003B E8CFFFFFFF          <1>     call    sprint
    55 00000040 58                  <1>     pop     eax
    56 00000041 58                  <1>     pop     eax
    57 00000042 C3                  <1>     ret
    58                              <1> 
    59                              <1> ;---------------  sread  ----------------------
    60                              <1> ; Функция считывания сообщения
    61                              <1> ; входные данные: mov eax,<buffer>, mov ebx,<N>
    62                              <1> sread:
    63 00000043 53                  <1>     push    ebx
    64 00000044 50                  <1>     push    eax
    65                              <1>    
    66 00000045 BB00000000          <1>     mov     ebx, 0
    67 0000004A B803000000          <1>     mov     eax, 3
    68 0000004F CD80                <1>     int     80h
    69                              <1> 
    70 00000051 5B                  <1>     pop     ebx
    71 00000052 59                  <1>     pop     ecx
    72 00000053 C3                  <1>     ret
    73                              <1>     
    74                              <1> ;------------- iprint  ---------------------
    75                              <1> ; Функция вывода на экран чисел в формате ASCII
    76                              <1> ; входные данные: mov eax,<int>
    77                              <1> iprint:
    78 00000054 50                  <1>     push    eax             
    79 00000055 51                  <1>     push    ecx             
    80 00000056 52                  <1>     push    edx             
    81 00000057 56                  <1>     push    esi             
    82 00000058 B900000000          <1>     mov     ecx, 0          
    83                              <1>     
    84                              <1> divideLoop:
    85 0000005D 41                  <1>     inc     ecx             
    86 0000005E BA00000000          <1>     mov     edx, 0          
    87 00000063 BE0A000000          <1>     mov     esi, 10  
    88 00000068 F7FE                <1>     idiv    esi    
    89 0000006A 83C230              <1>     add     edx, 48  
    90 0000006D 52                  <1>     push    edx   
    91 0000006E 83F800              <1>     cmp     eax, 0   
    92 00000071 75EA                <1>     jnz     divideLoop  
    93                              <1> 
    94                              <1> printLoop:
    95 00000073 49                  <1>     dec     ecx       
    96 00000074 89E0                <1>     mov     eax, esp  
    97 00000076 E894FFFFFF          <1>     call    sprint   
    98 0000007B 58                  <1>     pop     eax    
    99 0000007C 83F900              <1>     cmp     ecx, 0   
   100 0000007F 75F2                <1>     jnz     printLoop  
   101                              <1> 
   102 00000081 5E                  <1>     pop     esi   
   103 00000082 5A                  <1>     pop     edx    
   104 00000083 59                  <1>     pop     ecx   
   105 00000084 58                  <1>     pop     eax           
   106 00000085 C3                  <1>     ret
   107                              <1> 
   108                              <1> 
   109                              <1> ;--------------- iprintLF   --------------------
   110                              <1> ; Функция вывода на экран чисел в формате ASCII
   111                              <1> ; входные данные: mov eax,<int>
   112                              <1> iprintLF:
   113 00000086 E8C9FFFFFF          <1>     call    iprint          
   114                              <1> 
   115 0000008B 50                  <1>     push    eax             
   116 0000008C B80A000000          <1>     mov     eax, 0Ah        
   117 00000091 50                  <1>     push    eax             
   118 00000092 89E0                <1>     mov     eax, esp       
   119 00000094 E876FFFFFF          <1>     call    sprint          
   120 00000099 58                  <1>     pop     eax             
   121 0000009A 58                  <1>     pop     eax             
   122 0000009B C3                  <1>     ret
   123                              <1> 
   124                              <1> ;----------------- atoi  ---------------------
   125                              <1> ; Функция преобразования ascii-код символа в целое число
   126                              <1> ; входные данные: mov eax,<int>
   127                              <1> atoi:
   128 0000009C 53                  <1>     push    ebx             
   129 0000009D 51                  <1>     push    ecx             
   130 0000009E 52                  <1>     push    edx             
   131 0000009F 56                  <1>     push    esi             
   132 000000A0 89C6                <1>     mov     esi, eax        
   133 000000A2 B800000000          <1>     mov     eax, 0          
   134 000000A7 B900000000          <1>     mov     ecx, 0          
   135                              <1>  
   136                              <1> .multiplyLoop:
   137 000000AC 31DB                <1>     xor     ebx, ebx        
   138 000000AE 8A1C0E              <1>     mov     bl, [esi+ecx]
   139 000000B1 80FB30              <1>     cmp     bl, 48 
   140 000000B4 7C14                <1>     jl      .finished 
   141 000000B6 80FB39              <1>     cmp     bl, 57  
   142 000000B9 7F0F                <1>     jg      .finished 
   143                              <1>  
   144 000000BB 80EB30              <1>     sub     bl, 48 
   145 000000BE 01D8                <1>     add     eax, ebx
   146 000000C0 BB0A000000          <1>     mov     ebx, 10  
   147 000000C5 F7E3                <1>     mul     ebx  
   148 000000C7 41                  <1>     inc     ecx   
   149 000000C8 EBE2                <1>     jmp     .multiplyLoop  
   150                              <1>  
   151                              <1> .finished:
   152 000000CA 83F900              <1>     cmp     ecx, 0  
   153 000000CD 7407                <1>     je      .restore   
   154 000000CF BB0A000000          <1>     mov     ebx, 10  
   155 000000D4 F7F3                <1>     div     ebx     
   156                              <1>  
   157                              <1> .restore:
   158 000000D6 5E                  <1>     pop     esi   
   159 000000D7 5A                  <1>     pop     edx    
   160 000000D8 59                  <1>     pop     ecx  
   161 000000D9 5B                  <1>     pop     ebx 
   162 000000DA C3                  <1>     ret
   163                              <1> 
   164                              <1> 
   165                              <1> ;------------- quit   ---------------------
   166                              <1> ; Функция завершения программы
   167                              <1> quit:
   168 000000DB BB00000000          <1>     mov     ebx, 0      
   169 000000E0 B801000000          <1>     mov     eax, 1      
   170 000000E5 CD80                <1>     int     80h
   171 000000E7 C3                  <1>     ret
     2                                  SECTION .text
     3                                  global _start
     4                                  _start:
     5 000000E8 59                      pop ecx ; Извлекаем из стека в `ecx` количество
     6                                  ; аргументов (первое значение в стеке)
     7 000000E9 5A                      pop edx ; Извлекаем из стека в `edx` имя программы
     8                                  ; (второе значение в стеке)
     9 000000EA 83E901                  sub ecx, 1 ; Уменьшаем `ecx` на 1 (количество
    10                                  ; аргументов без названия программы)
    11                                  next:
    12 000000ED 83F900                  cmp ecx, 0 ; проверяем, есть ли еще аргументы
    13 000000F0 7408                    jz _end ; если аргументов нет выходим из цикла
    14                                  ; (переход на метку `_end`)
    15 000000F2 58                      pop eax ; иначе извлекаем аргумент из стека
    16 000000F3 E835FFFFFF              call sprintLF ; вызываем функцию печати
    17 000000F8 E2F3                    loop next ; переход к обработке следующего
    18                                  ; аргумента (переход на метку `next`)
    19                                  _end:
    20 000000FA E8DCFFFFFF              call quit
